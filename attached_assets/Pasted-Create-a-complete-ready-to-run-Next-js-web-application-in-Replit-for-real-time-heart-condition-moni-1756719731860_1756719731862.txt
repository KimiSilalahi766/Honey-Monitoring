Create a complete, ready-to-run Next.js web application in Replit for real-time heart condition monitoring and early identification, aligned with my thesis titled "PENERAPAN INTERNET OF THINGS DALAM IDENTIFIKASI DINI DAN MONITORING KONDISI JANTUNG SECARA REAL-TIME". The app must use Next.js 14+ with App Router, integrate Firebase Realtime Database (RTDB) for real-time data syncing from an ESP32 IoT device (which sends parameters like timestamp, suhu (temperature in °C), bpm (heart rate in BPM), spo2 (oxygen saturation in %), tekanan_sys (systolic blood pressure in mmHg), tekanan_dia (diastolic blood pressure in mmHg), signal_quality (in %), and kondisi (initial rule-based classification as a placeholder)). The data is stored in Firebase under the path "/data_jantung/data_<timestamp>".</timestamp>
Key features:

Use Firebase SDK to listen for real-time updates with onValue or child_added for low-latency syncing.
Implement server-side Naive Bayes classification in an API route (/api/classify) using a JavaScript library like 'naive-bayes' or 'ml-naive-bayes'. Train the model with a sample dataset (e.g., from UCI Heart Disease or hardcoded examples based on thesis ranges: normal BPM 60-100, SpO2 95-100%, temperature 36.1-37.2°C, blood pressure 90-120/60-80 mmHg; classify into 'Normal', 'Kurang Normal' if 1-2 parameters abnormal, 'Berbahaya' if 3+ abnormal). The API should accept current parameters via POST and return the classified condition with probabilities.
Dashboard page (/dashboard): Display real-time cards/gauges for each parameter (use react-gauge-chart or Chart.js for visuals), a prominent classification indicator with color-coding (green for Normal, yellow for Kurang Normal, red for Berbahaya), line charts for historical trends of each parameter (update dynamically), and a paginated table for data history (sortable by timestamp).
Include alerts: Show browser notifications or pop-ups if condition is 'Berbahaya'.
Add a disclaimer: "This system is for monitoring only, not medical diagnosis or recommendations."
Use Tailwind CSS for responsive, clean design (mobile-friendly). Include a simple landing page (/) with thesis title, logo (use a placeholder heart icon), and link to dashboard.
Firebase config: Use these placeholders (replace with actuals): apiKey: "AIzaSy...", authDomain: "monitoring-jantung-f8031.firebaseapp.com", databaseURL: "https://monitoring-jantung-f8031-default-rtdb.firebaseio.com", projectId: "monitoring-jantung-f8031".
No authentication needed initially, but add optional Firebase Auth for future.
Ensure the app is deployable on Replit with environment variables for Firebase secrets.
Provide the full code structure, including package.json dependencies (firebase, chart.js, react-chartjs-2, naive-bayes, tailwindcss, etc.), and instructions to run. Make it easy to test with dummy data in Firebase.
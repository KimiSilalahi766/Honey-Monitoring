#include <Arduino.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Adafruit_MLX90614.h>
#include "MAX30105.h"
#include "heartRate.h"
#include "spo2_algorithm.h"

#define BUTTON_PIN 4
#define RXD2 16
#define TXD2 17

LiquidCrystal_I2C lcd(0x27, 20, 4);
Adafruit_MLX90614 mlx = Adafruit_MLX90614();
MAX30105 particleSensor;

char buff[64];
bool b_read, b_discard;
char discard;
int i, j = 0;
char final_buff[64];

int hexSys = 0, hexDias = 0, hexBPM = 0;
float suhu = 0;

#define BUFFER_SIZE 100
uint32_t irBuffer[BUFFER_SIZE];
uint32_t redBuffer[BUFFER_SIZE];
const int durasi_ms = 30000;

const byte RATE_SIZE = 4;
byte rates[RATE_SIZE];
byte rateSpot = 0;
long lastBeat = 0;
float beatsPerMinute = 0;
int beatAvg = 0;
int bpm_final = 0;

int32_t spo2, heartRate;
int8_t validSpO2, validHeartRate;
int spo2_final = 0;

void setup() {
  Serial.begin(115200);
  Serial2.begin(115200, SERIAL_8N1, RXD2, TXD2);
  Wire.begin();
  pinMode(BUTTON_PIN, INPUT_PULLUP);

  lcd.init();
  lcd.backlight();
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Sistem Medis Siap");
  lcd.setCursor(0, 1);
  lcd.print("Tekan Tombol Biru");

  if (!mlx.begin()) {
    Serial.println("❌ MLX90614 tidak ditemukan");
    lcd.setCursor(0, 1);
    lcd.print("MLX90614 gagal");
    while (1);
  }

  if (!particleSensor.begin(Wire, I2C_SPEED_STANDARD)) {
    Serial.println("❌ MAX30102 tidak terdeteksi");
    lcd.setCursor(0, 1);
    lcd.print("MAX30102 gagal");
    while (1);
  }

  particleSensor.setup();
  particleSensor.setPulseAmplitudeRed(0x3F);
  particleSensor.setPulseAmplitudeIR(0x3F);

  Serial.println("Siap. Tekan tombol.");
}

void loop() {
  if (digitalRead(BUTTON_PIN) == LOW) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Proses dimulai...");
    delay(1000);

    bacaSuhu();
    delay(1000);
    ukurBPM();
    delay(1000);
    ukurSpO2();
    delay(1000);
    bacaTekananDarah();
    delay(1000);
    tampilkanRingkasan();

    Serial.println("\nSelesai. Tekan tombol lagi...");
    delay(5000);
  }
}

void bacaSuhu() {
  unsigned long start = millis();
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Cek Suhu Tubuh");

  while (millis() - start < 30000) {
    suhu = mlx.readObjectTempC();
    Serial.println("Suhu: " + String(suhu) + " C");
    lcd.setCursor(0, 1);
    lcd.print("Suhu: " + String(suhu, 1) + " C   ");
    lcd.setCursor(0, 2);
    lcd.print("Waktu: " + String((millis() - start) / 1000) + "/30s");
    delay(1000);
  }
  Serial.println("Suhu selesai.\n");
  delay(500);
}

void ukurBPM() {
  int detik = 0;
  unsigned long start = millis();
  unsigned long lastPrint = millis();

  lcd.clear();
  lcd.print("Deteksi BPM: 30s");
  delay(1000);

  while (millis() - start < durasi_ms) {
    long irValue = particleSensor.getIR();
    if (checkForBeat(irValue)) {
      long delta = millis() - lastBeat;
      lastBeat = millis();
      beatsPerMinute = 60.0 / (delta / 1000.0);
      if (beatsPerMinute >= 40 && beatsPerMinute <= 180) {
        bpm_final = beatsPerMinute;
      }
    }
    if (millis() - lastPrint >= 1000 && detik < 30) {
      detik++;
      lastPrint += 1000;
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("BPM: " + String(bpm_final));
      lcd.setCursor(0, 1);
      lcd.print("T: " + String(detik) + "/30");
      Serial.print("Detik "); Serial.print(detik); Serial.print(" => BPM: "); Serial.println(bpm_final);
    }
    delay(10);
  }
}

void ukurSpO2() {
  int detik = 0;
  lcd.clear();
  lcd.print("Deteksi SpO2: 30s");
  delay(1000);

  for (int i = 0; i < BUFFER_SIZE; i++) {
    while (!particleSensor.available()) particleSensor.check();
    redBuffer[i] = particleSensor.getRed();
    irBuffer[i] = particleSensor.getIR();
    particleSensor.nextSample();
  }

  unsigned long start = millis();
  unsigned long lastDetikMillis = millis();

  while (millis() - start < durasi_ms) {
    for (int i = 0; i < BUFFER_SIZE - 25; i++) {
      redBuffer[i] = redBuffer[i + 25];
      irBuffer[i] = irBuffer[i + 25];
    }
    for (int i = BUFFER_SIZE - 25; i < BUFFER_SIZE; i++) {
      while (!particleSensor.available()) particleSensor.check();
      redBuffer[i] = particleSensor.getRed();
      irBuffer[i] = particleSensor.getIR();
      particleSensor.nextSample();
    }

    maxim_heart_rate_and_oxygen_saturation(
      irBuffer, BUFFER_SIZE,
      redBuffer,
      &spo2, &validSpO2,
      &heartRate, &validHeartRate
    );

    if (validSpO2 == 1 && spo2 >= 70 && spo2 <= 100) {
      spo2_final = spo2;
    }

    if (millis() - lastDetikMillis >= 1000 && detik < 30) {
      detik++;
      lastDetikMillis += 1000;
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("SpO2: " + String(spo2_final) + "%");
      lcd.setCursor(0, 1);
      lcd.print("T: " + String(detik) + "/30");
      Serial.print("Detik "); Serial.print(detik); Serial.print(" => SpO2: "); Serial.println(spo2_final);
    }
    delay(10);
  }
}

void bacaTekananDarah() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Cek Tekanan Darah");
  Serial.println("Menunggu data tekanan darah...");

  b_read = 0;
  b_discard = 0;
  i = 0;
  j = 0;

  while (true) {
    if (Serial2.available()) {
      if (b_read == 0) {
        buff[0] = Serial2.read();
        if (buff[0] == 'e' && Serial2.read() == 'r' && Serial2.read() == 'r' && Serial2.read() == ':' && Serial2.read() == '0') {
          b_read = 1;
          j = 0;
          b_discard = 0;
          i = 0;
          Serial.println("✔ Frame header tensi OK");
        }
      }
      if (b_read) {
        if (b_discard == 0) {
          discard = Serial2.read();
          i++;
        } else if (j < 11) {
          final_buff[j] = Serial2.read();
          j++;
        } else {
          break;
        }
        if (i == 30) b_discard = 1;
      }
    }
    delay(2);
  }

  hexSys = hexToDec(final_buff[0], final_buff[1]);
  hexDias = hexToDec(final_buff[3], final_buff[4]);
  hexBPM = hexToDec(final_buff[9], final_buff[10]);

  Serial.println("Tekanan Darah:");
  Serial.println("SYS : " + String(hexSys));
  Serial.println("DIA : " + String(hexDias));
  Serial.println("BPM : " + String(hexBPM));

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("SYS: " + String(hexSys));
  lcd.setCursor(0, 1);
  lcd.print("DIA: " + String(hexDias));
  lcd.setCursor(0, 2);
  lcd.print("BPM: " + String(hexBPM));
}

void tampilkanRingkasan() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("T=" + String(suhu, 1) + "C, S/D=" + String(hexSys) + "/" + String(hexDias));
  lcd.setCursor(0, 1);
  lcd.print("HR=" + String(bpm_final) + ", SpO2=" + String(spo2_final) + "%");


  Serial.println("\n=== HASIL AKHIR ===");
  Serial.println("T = " + String(suhu, 1) + " C, S/D = " + String(hexSys) + "/" + String(hexDias));
  Serial.println("HR = " + String(bpm_final) + ", SpO2 = " + String(spo2_final) + " %");
}

int hexToDec(char high, char low) {
  int val = 0;
  if (high > '9') val = (high - '7') * 16;
  else val = (high - '0') * 16;
  if (low > '9') val += (low - '7');
  else val += (low - '0');
  return val;
}



itu